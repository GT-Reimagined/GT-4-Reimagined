archivesBaseName = "${rootProject.archive_base_name}-forge"
version = "${rootProject.mod_version}-${rootProject.minecraft_version}"

architectury {
    forge()
}

loom{
    accessWidenerPath = project(":antimatter-common").file("src/main/resources/antimatter.accesswidener")
    forge {
        mixinConfigs = [
                "gt4r.mixins.json", "gt4r.mixins.forge.json"
        ]
        dataGen {
            mod project.modid
        }

        launches {
            data {
                arg "--existing", file("src/main/resources").absolutePath
            }
        }
    }
}


dependencies {
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    implementation 'org.apache.commons:commons-collections4:4.4'
    //GT
    implementation(project(path: ":tesseract-forge", configuration: "namedElements"))
    common(project(path: ":tesseract-common", configuration: "namedElements"))

    //MIXIN
    if (System.getProperty('idea.sync.active') != 'true') {
        annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'
    }
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }

    implementation(project(path: ":antimatter-forge", configuration: "namedElements")){
        transitive = false;
    }
    common(project(path: ":antimatter-common", configuration: "namedElements")){
        transitive = false;
    }
    //JEI
    //modRuntimeOnly("mezz.jei:jei-${rootProject.minecraft_version}-forge:${rootProject.jei_version}")
    //modImplementation "me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}"
    modRuntimeOnly("mezz.jei:jei-1.18.2:9.7.2.1001")
    modImplementation("com.github.Reforged-Mods:ARRP-forge:0.6.7-1.18.2")
    modImplementation("earth.terrarium:botarium-forge-1.18.2:${project.botarium_version}")
    modImplementation("com.github.Reforged-Mods.Terraform-Reforged:terraform-utils-v1:${project.terraform_version}")
    modImplementation("io.github.llamalad7:mixinextras-forge:0.2.0-beta.11")
    implementation("io.github.gregtechintergalactical:gtcore-forge:${rootProject.gt_core_version}-${rootProject.minecraft_version}:dev"){
        transitive = false
    }
    include("io.github.gregtechintergalactical:gtcore-forge:${rootProject.gt_core_version}-${rootProject.minecraft_version}")
    modRuntimeOnly(include("com.github.Reforged-Mods.Terraform-Reforged:terraform-wood-api-v1:3.1.5"))
    modRuntimeOnly("com.gtnewhorizon.structurelib:structurelib-forge:${project.structurelib_version}-${project.minecraft_version}")
    modRuntimeOnly "com.teamresourceful.resourcefullib:resourcefullib-forge-1.18.2:${project.resourcefullib_version}"
    modRuntimeOnly("dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}")
    runtimeOnly("curse.maven:portality-291493:3840074")
    runtimeOnly("curse.maven:titanium-287342:4117991")
    modImplementation("curse.maven:the-one-probe-245211:${rootProject.top_forge_file}")
    modImplementation("curse.maven:ctm-267602:3933537")
    modRuntimeOnly("curse.maven:worldstripper-250603:3670854")
    modImplementation "maven.modrinth:carbon-config:IMC0pt5I"
    //modImplementation("com.simibubi.create:create-${minecraft_version}:0.5.0.i-249:slim") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:MC1.18.2-1.1.3")
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:0.6.8.a-99")
}

jar {
    zip64 true
    manifest {
        attributes([
                "MixinConfigs": "gt4r.mixins.json",
                "Specification-Title": project.name,
                "Specification-Vendor": "GT4 Reimagined",
                "Specification-Version": project.version,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "GT4 Reimagined",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {

    inputs.property "version", project.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.mod_version
    }
}
