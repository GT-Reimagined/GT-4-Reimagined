archivesBaseName = "${rootProject.archive_base_name}-fabric"
version = "${rootProject.minecraft_version}-${project.mod_version}"

def generatedResources = file("src/generated/resources")
def accessWidenerFile = project(":antimatter-common").file("src/main/resources/antimatter.accesswidener")

loom {
    accessWidenerPath = accessWidenerFile
}

repositories {
    maven {
        url = uri("https://storage.googleapis.com/devan-maven/")
    }
}

sourceSets {
    main {
        resources {
            srcDir generatedResources
        }
    }
}

dependencies{
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    common(project(path: ":tesseract-common", configuration: "namedElements")) { transitive false }
    common(project(path: ":antimatter-common", configuration: "namedElements")) { transitive false }
    implementation(project(path: ":tesseract-fabric", configuration: "namedElements")) { transitive false }
    implementation(project(path: ":antimatter-fabric", configuration: "namedElements"))
    modImplementation("io.github.fabricators_of_create:Porting-Lib:${rootProject.port_lib_version}-beta+1.18.2-stable"){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.github.LlamaLad7")
    }
    modImplementation("io.github.feltmc:felt-recipe-api:1.0.0"){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.terraformersmc")
    }
    modImplementation("io.github.feltmc:felt-player-item-api:1.0.0") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.terraformersmc")
    }
    modImplementation("earth.terrarium:botarium-fabric-1.18.2:${project.botarium_version}")
    modImplementation("com.github.Trinsdar.Felt-API:felt-enchanting-api:c372f99be1") { transitive false }
    modImplementation(include("com.github.Trinsdar.Felt-API:felt-durability-item-api:c4015755f9")){ transitive false }
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    /*modImplementation("io.github.fabricators_of_create:Porting-Lib:1.1.310-beta+1.18.2-dev.${rootProject.port_lib_hash}"){
        exclude(group: "net.fabricmc.fabric-api")
    }*/
    modImplementation("com.github.Trinsdar:ARRP:0.6.7-hotfix")
    implementation("io.github.gregtechintergalactical:gtrubber-fabric:${rootProject.gt_rubber_version}-${rootProject.minecraft_version}:dev-shadow"){
        transitive = false
    }
    include("io.github.gregtechintergalactical:gtrubber-fabric:${rootProject.gt_rubber_version}-${rootProject.minecraft_version}"){
        transitive = false
    }
    implementation("io.github.gregtechintergalactical:gtutility-fabric:${rootProject.gt_utility_version}-${rootProject.minecraft_version}:dev-shadow"){
        transitive = false
    }
    include("io.github.gregtechintergalactical:gtutility-fabric:${rootProject.gt_utility_version}-${rootProject.minecraft_version}")
    modRuntimeOnly("com.gtnewhorizon.structurelib:structurelib-fabric:${project.structurelib_version}-${project.minecraft_version}")
    modRuntimeOnly "com.teamresourceful.resourcefullib:resourcefullib-fabric-1.18.2:${project.resourcefullib_version}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"
    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-common-api:${rootProject.jei_version}")
    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-fabric-api:${rootProject.jei_version}")
    implementation("com.electronwill.night-config:toml:${rootProject.nightconfig_version}")
    implementation("com.electronwill.night-config:core:${rootProject.nightconfig_version}")
    modImplementation("teamreborn:energy:${rootProject.energy_version}") {
        transitive = false
    }
    modRuntimeOnly("com.terraformersmc:modmenu:${rootProject.mod_menu_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation("net.minecraftforge:forgeconfigapiport-fabric:3.2.4")
    modRuntimeOnly("dev.latvian.mods:kubejs-fabric:${rootProject.kubejs_version}")
}

architectury {
    fabric()
}

processResources {

    def toReplace = [
            "version"             : project.version
    ]

    inputs.properties toReplace
    filesMatching("fabric.mod.json") {
        expand toReplace
    }
}
sourcesJar {
    def commonSources = project(":antimatter-common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

/*
publishing {
    tasks.publish.dependsOn "build", "reobfJar"
    publications {
        mavenJava(org.gradle.api.publish.maven.MavenPublication) {
            //artifactId = archivesBaseName
            artifact shadowJar
        }
    }
    repositories {
        if (rootProject.isCI && rootProject.isRELEASE) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/GregTech-Intergalactical/TesseractAPI"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        } else {
            maven { url "file:///${project.projectDir}/mcmodsrepo"}
        }
    }
    //repositories {
    //    rootProject.configurePublishingRepositories(delegate)
    //}
}*/
